[/usr/bin/yosys, -p, synth_ice40 -top cu_top_0 -blif /home/romuald/Projects/alchitry/Test1/work/alchitry.blif, /home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v, /home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v]

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, gcc 11.1.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)


-- Parsing `/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v
Parsing Verilog input from `/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v' to AST representation.
Generating RTLIL representation for module `\cu_top_0'.
Successfully finished Verilog frontend.

-- Parsing `/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: /home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v
Parsing Verilog input from `/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v' to AST representation.
Generating RTLIL representation for module `\reset_conditioner_1'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top cu_top_0 -blif /home/romuald/Projects/alchitry/Test1/work/alchitry.blif' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.2.1. Analyzing design hierarchy..
Top module:  \cu_top_0
Used module:     \reset_conditioner_1

3.2.2. Analyzing design hierarchy..
Top module:  \cu_top_0
Used module:     \reset_conditioner_1
Removed 0 unused modules.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:29$4 in module reset_conditioner_1.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:20$6'.
  Set init value: \M_stage_q = 4'1111

3.3.4. Executing PROC_ARST pass (detect async resets in processes).

3.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:20$6'.
     1/1: $1\M_stage_q[3:0]
Creating decoders for process `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:29$4'.
     1/1: $0\M_stage_q[3:0]
Creating decoders for process `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:22$3'.
     1/2: $0\out[0:0]
     2/2: $0\M_stage_d[3:0]
Creating decoders for process `\cu_top_0.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v:27$1'.
     1/4: $0\usb_tx[0:0]
     2/4: $0\led[7:0]
     3/4: $0\rst[0:0]
     4/4: $0\M_reset_cond_in[0:0]

3.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\reset_conditioner_1.\M_stage_d' from process `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:22$3'.
No latch inferred for signal `\reset_conditioner_1.\out' from process `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:22$3'.
No latch inferred for signal `\cu_top_0.\M_reset_cond_in' from process `\cu_top_0.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v:27$1'.
No latch inferred for signal `\cu_top_0.\usb_tx' from process `\cu_top_0.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v:27$1'.
No latch inferred for signal `\cu_top_0.\rst' from process `\cu_top_0.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v:27$1'.
No latch inferred for signal `\cu_top_0.\led' from process `\cu_top_0.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v:27$1'.

3.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\reset_conditioner_1.\M_stage_q' using process `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:29$4'.
  created $dff cell `$procdff$10' with positive edge clock.

3.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:20$6'.
Found and cleaned up 1 empty switch in `\reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:29$4'.
Removing empty process `reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:29$4'.
Removing empty process `reset_conditioner_1.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/reset_conditioner_1.v:22$3'.
Removing empty process `cu_top_0.$proc$/home/romuald/Projects/alchitry/Test1/work/verilog/cu_top_0.v:27$1'.
Cleaned up 1 empty switch.

3.4. Executing FLATTEN pass (flatten design).
Using template reset_conditioner_1 for cells of type reset_conditioner_1.
<suppressed ~1 debug messages>
No more expansions possible.
Deleting now unused module reset_conditioner_1.

3.5. Executing TRIBUF pass.

3.6. Executing DEMINOUT pass (demote inout ports to input or output).

3.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.
<suppressed ~2 debug messages>

3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..
Removed 3 unused cells and 12 unused wires.
<suppressed ~4 debug messages>

3.9. Executing CHECK pass (checking for obvious problems).
checking module cu_top_0..
found and reported 0 problems.

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cu_top_0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cu_top_0.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reset_cond.M_stage_q = 4'1111 to constant driver in module cu_top_0.
Promoted 1 init specs to constant drivers.

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cu_top_0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cu_top_0.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing WREDUCE pass (reducing word size of cells).

3.12. Executing PEEPOPT pass (run peephole optimizers).

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.14. Executing SHARE pass (SAT-based resource sharing).

3.15. Executing TECHMAP pass (map to technology primitives).

3.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.15.2. Continuing TECHMAP pass.
No more expansions possible.

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cu_top_0:
  created 0 $alu and 0 $macc cells.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cu_top_0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cu_top_0.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.19.9. Finished OPT passes. (There is nothing left to do.)

3.20. Executing FSM pass (extract and optimize FSM).

3.20.1. Executing FSM_DETECT pass (finding FSMs in design).

3.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.21.5. Finished fast OPT passes.

3.22. Executing MEMORY pass.

3.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

3.25.2. Continuing TECHMAP pass.
No more expansions possible.

3.26. Executing ICE40_BRAMINIT pass.

3.27. Executing OPT pass (performing simple optimizations).

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.27.5. Finished fast OPT passes.

3.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.29. Executing OPT pass (performing simple optimizations).

3.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cu_top_0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cu_top_0.
Performed a total of 0 changes.

3.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.29.9. Finished OPT passes. (There is nothing left to do.)

3.30. Executing TECHMAP pass (map to technology primitives).

3.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.30.3. Continuing TECHMAP pass.
No more expansions possible.

3.31. Executing ICE40_OPT pass (performing simple optimizations).

3.31.1. Running ICE40 specific optimizations.

3.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

3.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.31.6. Finished OPT passes. (There is nothing left to do.)

3.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

3.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module cu_top_0:

3.34. Executing TECHMAP pass (map to technology primitives).

3.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v

Finished synthesis.

Project IceStorm doesn't support .sdc constraints. "/home/romuald/Projects/alchitry/Test1/work/constraint/merged_constraint.sdc" will be ignored.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

3.34.2. Continuing TECHMAP pass.
No more expansions possible.

3.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in cu_top_0.

3.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in cu_top_0.

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module cu_top_0.

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cu_top_0'.
Removed a total of 0 cells.

3.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cu_top_0..

3.39.6. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\cu_top_0' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.42.2. Continuing TECHMAP pass.
No more expansions possible.

3.43. Executing HIERARCHY pass (managing design hierarchy).

3.43.1. Analyzing design hierarchy..
Top module:  \cu_top_0

3.43.2. Analyzing design hierarchy..
Top module:  \cu_top_0
Removed 0 unused modules.

3.44. Printing statistics.

=== cu_top_0 ===

   Number of wires:                 11
   Number of wire bits:             24
   Number of public wires:          11
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

3.45. Executing CHECK pass (checking for obvious problems).
checking module cu_top_0..
found and reported 0 problems.

3.46. Executing BLIF backend.

End of script. Logfile hash: 5e5a9a200b
CPU: user 0.19s system 0.03s, MEM: 39.55 MB total, 27.20 MB resident
Yosys 0.9 (git sha1 UNKNOWN, gcc 11.1.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)
Time spent: 52% 11x read_verilog (0 sec), 19% 1x share (0 sec), ...
seed: 1
device: 8k
read_chipdb +/share/arachne-pnr/chipdb-8k.bin...
  supported packages: bg121, bg121:4k, cb132, cb132:4k, cm121, cm121:4k, cm225, cm225:4k, cm81, cm81:4k, ct256, tq144:4k
read_blif /home/romuald/Projects/alchitry/Test1/work/alchitry.blif...
prune...
read_pcf /home/romuald/Projects/alchitry/Test1/work/constraint/merged_constraint.pcf...
instantiate_io...
pack...

After packing:
IOs          12 / 95
GBs          0 / 8
  GB_IOs     0 / 8
LCs          0 / 7680
  DFF        0
  CARRY      0
  CARRY, DFF 0
  DFF PASS   0
  CARRY PASS 0
BRAMs        0 / 32
WARMBOOTs    0 / 1
PLLs         0 / 2

place_constraints...
promote_globals...
  promoted 0 nets
  0 globals
realize_constants...
place...
  initial wire length = 12
  at iteration #50: temp = 281.475, wire length = 12
  at iteration #100: temp = 0.00401735, wire length = 12
  final wire length = 12

After placement:
PIOs       9 / 95
PLBs       0 / 960
BRAMs      0 / 32

  place time 0.00s
route...

Finished placement.

Bin file (/home/romuald/Projects/alchitry/Test1/work/alchitry.bin) could not be found! The build probably failed.
